<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aite.mapper.AtFlashConvertRecordMapper">
  <resultMap id="BaseResultMap" type="com.aite.pojo.AtFlashConvertRecord">
    <id column="fc_record_id" jdbcType="VARCHAR" property="fcRecordId" />
    <result column="from_transfer_record_id" jdbcType="VARCHAR" property="fromTransferRecordId" />
    <result column="try_from_transfer_record_id" jdbcType="VARCHAR" property="tryFromTransferRecordId" />
    <result column="to_transfer_record_id" jdbcType="VARCHAR" property="toTransferRecordId" />
    <result column="try_to_transfer_record_id" jdbcType="VARCHAR" property="tryToTransferRecordId" />
    <result column="back_transfer_record_id" jdbcType="VARCHAR" property="backTransferRecordId" />
    <result column="try_back_transfer_record_id" jdbcType="VARCHAR" property="tryBackTransferRecordId" />
    <result column="from_coin_id" jdbcType="VARCHAR" property="fromCoinId" />
    <result column="to_coin_id" jdbcType="VARCHAR" property="toCoinId" />
    <result column="snap_exchange_rate" jdbcType="DECIMAL" property="snapExchangeRate" />
    <result column="snap_from_wallet_address" jdbcType="VARCHAR" property="snapFromWalletAddress" />
    <result column="snap_to_wallet_address" jdbcType="VARCHAR" property="snapToWalletAddress" />
    <result column="snap_from_fund_wallet_address" jdbcType="VARCHAR" property="snapFromFundWalletAddress" />
    <result column="snap_to_fund_wallet_address" jdbcType="VARCHAR" property="snapToFundWalletAddress" />
    <result column="from_value" jdbcType="DECIMAL" property="fromValue" />
    <result column="to_value" jdbcType="DECIMAL" property="toValue" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="statu_msg" jdbcType="VARCHAR" property="statuMsg" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="upt_time" jdbcType="TIMESTAMP" property="uptTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fc_record_id, from_transfer_record_id, try_from_transfer_record_id, to_transfer_record_id, 
    try_to_transfer_record_id, back_transfer_record_id, try_back_transfer_record_id, 
    from_coin_id, to_coin_id, snap_exchange_rate, snap_from_wallet_address, snap_to_wallet_address, 
    snap_from_fund_wallet_address, snap_to_fund_wallet_address, from_value, to_value, 
    `status`, statu_msg, `time`, del_flag, add_time, upt_time
  </sql>
  <select id="selectByExample" parameterType="com.aite.pojo.AtFlashConvertRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        fc_record_id, from_transfer_record_id, try_from_transfer_record_id, to_transfer_record_id, 
          try_to_transfer_record_id, back_transfer_record_id, try_back_transfer_record_id, 
          from_coin_id, to_coin_id, snap_exchange_rate, snap_from_wallet_address, snap_to_wallet_address, 
          snap_from_fund_wallet_address, snap_to_fund_wallet_address, from_value, to_value, 
          `status`, statu_msg, `time`, del_flag, add_time, upt_time
      </otherwise>
    </choose>
    from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from at_flash_convert_record
    where fc_record_id = #{fcRecordId,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        fc_record_id, from_transfer_record_id, try_from_transfer_record_id, to_transfer_record_id, 
          try_to_transfer_record_id, back_transfer_record_id, try_back_transfer_record_id, 
          from_coin_id, to_coin_id, snap_exchange_rate, snap_from_wallet_address, snap_to_wallet_address, 
          snap_from_fund_wallet_address, snap_to_fund_wallet_address, from_value, to_value, 
          `status`, statu_msg, `time`, del_flag, add_time, upt_time
      </otherwise>
    </choose>
    from at_flash_convert_record
    where fc_record_id = #{fcRecordId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from at_flash_convert_record
    where fc_record_id = #{fcRecordId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.aite.pojo.AtFlashConvertRecordExample">
    delete from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.aite.pojo.AtFlashConvertRecord">
    insert into at_flash_convert_record (fc_record_id, from_transfer_record_id, 
      try_from_transfer_record_id, to_transfer_record_id, 
      try_to_transfer_record_id, back_transfer_record_id, 
      try_back_transfer_record_id, from_coin_id, to_coin_id, 
      snap_exchange_rate, snap_from_wallet_address, 
      snap_to_wallet_address, snap_from_fund_wallet_address, 
      snap_to_fund_wallet_address, from_value, to_value, 
      `status`, statu_msg, `time`, 
      del_flag, add_time, upt_time
      )
    values (#{fcRecordId,jdbcType=VARCHAR}, #{fromTransferRecordId,jdbcType=VARCHAR}, 
      #{tryFromTransferRecordId,jdbcType=VARCHAR}, #{toTransferRecordId,jdbcType=VARCHAR}, 
      #{tryToTransferRecordId,jdbcType=VARCHAR}, #{backTransferRecordId,jdbcType=VARCHAR}, 
      #{tryBackTransferRecordId,jdbcType=VARCHAR}, #{fromCoinId,jdbcType=VARCHAR}, #{toCoinId,jdbcType=VARCHAR}, 
      #{snapExchangeRate,jdbcType=DECIMAL}, #{snapFromWalletAddress,jdbcType=VARCHAR}, 
      #{snapToWalletAddress,jdbcType=VARCHAR}, #{snapFromFundWalletAddress,jdbcType=VARCHAR}, 
      #{snapToFundWalletAddress,jdbcType=VARCHAR}, #{fromValue,jdbcType=DECIMAL}, #{toValue,jdbcType=DECIMAL}, 
      #{status,jdbcType=INTEGER}, #{statuMsg,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=BIT}, #{addTime,jdbcType=TIMESTAMP}, #{uptTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.aite.pojo.AtFlashConvertRecord">
    insert into at_flash_convert_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fcRecordId != null">
        fc_record_id,
      </if>
      <if test="fromTransferRecordId != null">
        from_transfer_record_id,
      </if>
      <if test="tryFromTransferRecordId != null">
        try_from_transfer_record_id,
      </if>
      <if test="toTransferRecordId != null">
        to_transfer_record_id,
      </if>
      <if test="tryToTransferRecordId != null">
        try_to_transfer_record_id,
      </if>
      <if test="backTransferRecordId != null">
        back_transfer_record_id,
      </if>
      <if test="tryBackTransferRecordId != null">
        try_back_transfer_record_id,
      </if>
      <if test="fromCoinId != null">
        from_coin_id,
      </if>
      <if test="toCoinId != null">
        to_coin_id,
      </if>
      <if test="snapExchangeRate != null">
        snap_exchange_rate,
      </if>
      <if test="snapFromWalletAddress != null">
        snap_from_wallet_address,
      </if>
      <if test="snapToWalletAddress != null">
        snap_to_wallet_address,
      </if>
      <if test="snapFromFundWalletAddress != null">
        snap_from_fund_wallet_address,
      </if>
      <if test="snapToFundWalletAddress != null">
        snap_to_fund_wallet_address,
      </if>
      <if test="fromValue != null">
        from_value,
      </if>
      <if test="toValue != null">
        to_value,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="statuMsg != null">
        statu_msg,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="uptTime != null">
        upt_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fcRecordId != null">
        #{fcRecordId,jdbcType=VARCHAR},
      </if>
      <if test="fromTransferRecordId != null">
        #{fromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryFromTransferRecordId != null">
        #{tryFromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="toTransferRecordId != null">
        #{toTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryToTransferRecordId != null">
        #{tryToTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="backTransferRecordId != null">
        #{backTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryBackTransferRecordId != null">
        #{tryBackTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="fromCoinId != null">
        #{fromCoinId,jdbcType=VARCHAR},
      </if>
      <if test="toCoinId != null">
        #{toCoinId,jdbcType=VARCHAR},
      </if>
      <if test="snapExchangeRate != null">
        #{snapExchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="snapFromWalletAddress != null">
        #{snapFromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapToWalletAddress != null">
        #{snapToWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapFromFundWalletAddress != null">
        #{snapFromFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapToFundWalletAddress != null">
        #{snapToFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="fromValue != null">
        #{fromValue,jdbcType=DECIMAL},
      </if>
      <if test="toValue != null">
        #{toValue,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="statuMsg != null">
        #{statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptTime != null">
        #{uptTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.aite.pojo.AtFlashConvertRecordExample" resultType="java.lang.Long">
    select count(*) from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update at_flash_convert_record
    <set>
      <if test="record.fcRecordId != null">
        fc_record_id = #{record.fcRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.fromTransferRecordId != null">
        from_transfer_record_id = #{record.fromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.tryFromTransferRecordId != null">
        try_from_transfer_record_id = #{record.tryFromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.toTransferRecordId != null">
        to_transfer_record_id = #{record.toTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.tryToTransferRecordId != null">
        try_to_transfer_record_id = #{record.tryToTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.backTransferRecordId != null">
        back_transfer_record_id = #{record.backTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.tryBackTransferRecordId != null">
        try_back_transfer_record_id = #{record.tryBackTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.fromCoinId != null">
        from_coin_id = #{record.fromCoinId,jdbcType=VARCHAR},
      </if>
      <if test="record.toCoinId != null">
        to_coin_id = #{record.toCoinId,jdbcType=VARCHAR},
      </if>
      <if test="record.snapExchangeRate != null">
        snap_exchange_rate = #{record.snapExchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="record.snapFromWalletAddress != null">
        snap_from_wallet_address = #{record.snapFromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.snapToWalletAddress != null">
        snap_to_wallet_address = #{record.snapToWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.snapFromFundWalletAddress != null">
        snap_from_fund_wallet_address = #{record.snapFromFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.snapToFundWalletAddress != null">
        snap_to_fund_wallet_address = #{record.snapToFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.fromValue != null">
        from_value = #{record.fromValue,jdbcType=DECIMAL},
      </if>
      <if test="record.toValue != null">
        to_value = #{record.toValue,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.statuMsg != null">
        statu_msg = #{record.statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=BIT},
      </if>
      <if test="record.addTime != null">
        add_time = #{record.addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uptTime != null">
        upt_time = #{record.uptTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update at_flash_convert_record
    set fc_record_id = #{record.fcRecordId,jdbcType=VARCHAR},
      from_transfer_record_id = #{record.fromTransferRecordId,jdbcType=VARCHAR},
      try_from_transfer_record_id = #{record.tryFromTransferRecordId,jdbcType=VARCHAR},
      to_transfer_record_id = #{record.toTransferRecordId,jdbcType=VARCHAR},
      try_to_transfer_record_id = #{record.tryToTransferRecordId,jdbcType=VARCHAR},
      back_transfer_record_id = #{record.backTransferRecordId,jdbcType=VARCHAR},
      try_back_transfer_record_id = #{record.tryBackTransferRecordId,jdbcType=VARCHAR},
      from_coin_id = #{record.fromCoinId,jdbcType=VARCHAR},
      to_coin_id = #{record.toCoinId,jdbcType=VARCHAR},
      snap_exchange_rate = #{record.snapExchangeRate,jdbcType=DECIMAL},
      snap_from_wallet_address = #{record.snapFromWalletAddress,jdbcType=VARCHAR},
      snap_to_wallet_address = #{record.snapToWalletAddress,jdbcType=VARCHAR},
      snap_from_fund_wallet_address = #{record.snapFromFundWalletAddress,jdbcType=VARCHAR},
      snap_to_fund_wallet_address = #{record.snapToFundWalletAddress,jdbcType=VARCHAR},
      from_value = #{record.fromValue,jdbcType=DECIMAL},
      to_value = #{record.toValue,jdbcType=DECIMAL},
      `status` = #{record.status,jdbcType=INTEGER},
      statu_msg = #{record.statuMsg,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      upt_time = #{record.uptTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.aite.pojo.AtFlashConvertRecord">
    update at_flash_convert_record
    <set>
      <if test="fromTransferRecordId != null">
        from_transfer_record_id = #{fromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryFromTransferRecordId != null">
        try_from_transfer_record_id = #{tryFromTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="toTransferRecordId != null">
        to_transfer_record_id = #{toTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryToTransferRecordId != null">
        try_to_transfer_record_id = #{tryToTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="backTransferRecordId != null">
        back_transfer_record_id = #{backTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="tryBackTransferRecordId != null">
        try_back_transfer_record_id = #{tryBackTransferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="fromCoinId != null">
        from_coin_id = #{fromCoinId,jdbcType=VARCHAR},
      </if>
      <if test="toCoinId != null">
        to_coin_id = #{toCoinId,jdbcType=VARCHAR},
      </if>
      <if test="snapExchangeRate != null">
        snap_exchange_rate = #{snapExchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="snapFromWalletAddress != null">
        snap_from_wallet_address = #{snapFromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapToWalletAddress != null">
        snap_to_wallet_address = #{snapToWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapFromFundWalletAddress != null">
        snap_from_fund_wallet_address = #{snapFromFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="snapToFundWalletAddress != null">
        snap_to_fund_wallet_address = #{snapToFundWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="fromValue != null">
        from_value = #{fromValue,jdbcType=DECIMAL},
      </if>
      <if test="toValue != null">
        to_value = #{toValue,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="statuMsg != null">
        statu_msg = #{statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptTime != null">
        upt_time = #{uptTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where fc_record_id = #{fcRecordId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.aite.pojo.AtFlashConvertRecord">
    update at_flash_convert_record
    set from_transfer_record_id = #{fromTransferRecordId,jdbcType=VARCHAR},
      try_from_transfer_record_id = #{tryFromTransferRecordId,jdbcType=VARCHAR},
      to_transfer_record_id = #{toTransferRecordId,jdbcType=VARCHAR},
      try_to_transfer_record_id = #{tryToTransferRecordId,jdbcType=VARCHAR},
      back_transfer_record_id = #{backTransferRecordId,jdbcType=VARCHAR},
      try_back_transfer_record_id = #{tryBackTransferRecordId,jdbcType=VARCHAR},
      from_coin_id = #{fromCoinId,jdbcType=VARCHAR},
      to_coin_id = #{toCoinId,jdbcType=VARCHAR},
      snap_exchange_rate = #{snapExchangeRate,jdbcType=DECIMAL},
      snap_from_wallet_address = #{snapFromWalletAddress,jdbcType=VARCHAR},
      snap_to_wallet_address = #{snapToWalletAddress,jdbcType=VARCHAR},
      snap_from_fund_wallet_address = #{snapFromFundWalletAddress,jdbcType=VARCHAR},
      snap_to_fund_wallet_address = #{snapToFundWalletAddress,jdbcType=VARCHAR},
      from_value = #{fromValue,jdbcType=DECIMAL},
      to_value = #{toValue,jdbcType=DECIMAL},
      `status` = #{status,jdbcType=INTEGER},
      statu_msg = #{statuMsg,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      upt_time = #{uptTime,jdbcType=TIMESTAMP}
    where fc_record_id = #{fcRecordId,jdbcType=VARCHAR}
  </update>
  <select id="selectOneByExample" parameterType="com.aite.pojo.AtFlashConvertRecordExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        fc_record_id, from_transfer_record_id, try_from_transfer_record_id, to_transfer_record_id, 
          try_to_transfer_record_id, back_transfer_record_id, try_back_transfer_record_id, 
          from_coin_id, to_coin_id, snap_exchange_rate, snap_from_wallet_address, snap_to_wallet_address, 
          snap_from_fund_wallet_address, snap_to_fund_wallet_address, from_value, to_value, 
          `status`, statu_msg, `time`, del_flag, add_time, upt_time
      </otherwise>
    </choose>
    from at_flash_convert_record
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
</mapper>