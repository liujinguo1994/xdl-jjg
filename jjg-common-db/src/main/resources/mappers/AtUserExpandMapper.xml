<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aite.mapper.AtUserExpandMapper">
  <resultMap id="BaseResultMap" type="com.aite.expdo.ChartDateDO">
    <id column="num" jdbcType="INTEGER" property="num" />
    <result column="timeline" jdbcType="VARCHAR" property="timeline" />
  </resultMap>

    <resultMap id="getUserResultMap" type="com.aite.expdo.AtUserDO">
        <id column="userId" jdbcType="VARCHAR" property="userId" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
        <result column="userName" jdbcType="VARCHAR" property="userName" />
        <result column="registerTime" jdbcType="TIMESTAMP" property="registerTime" />
        <result column="freezeFlag" jdbcType="BIT" property="freezeFlag" />
        <result column="invite" jdbcType="INTEGER" property="invite" />
        <result column="userWalletHistroyId" jdbcType="VARCHAR" property="userWalletHistroyId" />
    </resultMap>

  <select id="getUserIncreaseList" resultType="com.aite.expdo.ChartDateDO">

	SELECT
	days.days as timeline,
	count(at_user.user_id) AS num
FROM
	(
		SELECT
			@date := DATE_ADD(@date, INTERVAL + 1 DAY) days
		FROM
			(
				SELECT
					@date := DATE_ADD(DATE_FORMAT(NOW(), '%Y-%m-%d'), INTERVAL - 7 DAY)
				FROM
					at_user
				LIMIT 14
			) time
	) AS days
LEFT JOIN at_user ON TO_DAYS(at_user.register_time) = TO_DAYS(days.days)
GROUP BY
	days.days

	ORDER BY timeline;
  </select>

    <select id="getUserCumulativeMonthList" resultType="com.aite.expdo.ChartDateDO">
        SELECT
            v.MONTH as timeline,
            ifnull( b.MINUTE, 0 ) as num
        FROM
            (
            SELECT DATE_FORMAT((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 1 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 2 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 3 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 4 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 5 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 6 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 7 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 8 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 9 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 10 MONTH), '%Y-%m') AS `month`
            UNION SELECT DATE_FORMAT(((SELECT DATE_FORMAT( au2.register_time, '%Y-%m-%d' ) da FROM at_user au2 ORDER BY da ASC LIMIT 1) + INTERVAL 11 MONTH), '%Y-%m') AS `month`
            ) v
            LEFT JOIN (
        SELECT
            DATE_FORMAT( t.register_time, '%Y-%m' ) MONTH,
            count( t.user_id ) MINUTE
        FROM
            at_user t
        WHERE
            DATE_FORMAT( t.register_time, '%Y-%m' ) > DATE_FORMAT( date_sub( curdate( ), INTERVAL 12 MONTH ), '%Y-%m' )
        GROUP BY
        MONTH
        ) b ON v.MONTH = b.MONTH
        GROUP BY
            v.MONTH
  </select>
    <select id="getUserList" resultType="com.aite.expdo.AtUserDO">
        SELECT
            au.user_id as userId,
            au.user_name as userName,
            au.phone,
        IF
            ( isnull( atIn.count ), 0, atIn.count ) counts,
        IF
            ( isnull( au.invitees_id), '非邀请', '扫描邀请码' ) invite,
        IF
        ( isnull( auwh.freeze_flag), 0, auwh.freeze_flag ) AS freezeFlag ,
            au.register_time as registerTime,
            auwh.snap_wallet_address AS userWalletHistroyId
        FROM
            at_user au
            LEFT JOIN at_user_wallet_history auwh ON auwh.user_id = au.user_id
            LEFT JOIN ( SELECT count( atuser.invitees_id ) AS count, atuser.invitees_id inviId FROM at_user atuser GROUP BY atuser.invitees_id ) atIn ON atIn.inviId = au.user_id
        WHERE
            1=1
        <if test="phone != null and phone != ''">
            AND
            au.phone = #{phone}
        </if>
        <if test="walletAdress != null and walletAdress != ''">
            AND
            au.user_wallet_histroy_id = #{walletAdress}
        </if>
        <if test="walletState != null and walletState != ''and walletState != 2">
            AND
            auwh.freeze_flag = #{walletState}
        </if>
    </select>


</mapper>