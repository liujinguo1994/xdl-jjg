<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aite.mapper.AtTransferRecordMapper">
  <resultMap id="BaseResultMap" type="com.aite.pojo.AtTransferRecord">
    <id column="transfer_record_id" jdbcType="VARCHAR" property="transferRecordId" />
    <result column="from_wallet_address" jdbcType="VARCHAR" property="fromWalletAddress" />
    <result column="coin_id" jdbcType="VARCHAR" property="coinId" />
    <result column="to_wallet_address" jdbcType="VARCHAR" property="toWalletAddress" />
    <result column="value" jdbcType="DECIMAL" property="value" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="try_hash" jdbcType="VARCHAR" property="tryHash" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="statu_msg" jdbcType="VARCHAR" property="statuMsg" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="gas" jdbcType="DECIMAL" property="gas" />
    <result column="block" jdbcType="INTEGER" property="block" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="upt_time" jdbcType="TIMESTAMP" property="uptTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.aite.pojo.AtTransferRecord">
    <result column="memo" jdbcType="LONGVARCHAR" property="memo" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    transfer_record_id, from_wallet_address, coin_id, to_wallet_address, `value`, hash, 
    try_hash, `status`, statu_msg, `time`, gas, block, del_flag, add_time, upt_time
  </sql>
  <sql id="Blob_Column_List">
    memo
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.aite.pojo.AtTransferRecordExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.aite.pojo.AtTransferRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        transfer_record_id, from_wallet_address, coin_id, to_wallet_address, `value`, hash, 
          try_hash, `status`, statu_msg, `time`, gas, block, del_flag, add_time, upt_time, 
          memo
      </otherwise>
    </choose>
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from at_transfer_record
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        transfer_record_id, from_wallet_address, coin_id, to_wallet_address, `value`, hash, 
          try_hash, `status`, statu_msg, `time`, gas, block, del_flag, add_time, upt_time, 
          memo
      </otherwise>
    </choose>
    from at_transfer_record
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from at_transfer_record
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.aite.pojo.AtTransferRecordExample">
    delete from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.aite.pojo.AtTransferRecord">
    insert into at_transfer_record (transfer_record_id, from_wallet_address, 
      coin_id, to_wallet_address, `value`, 
      hash, try_hash, `status`, 
      statu_msg, `time`, gas, 
      block, del_flag, add_time, 
      upt_time, memo)
    values (#{transferRecordId,jdbcType=VARCHAR}, #{fromWalletAddress,jdbcType=VARCHAR}, 
      #{coinId,jdbcType=VARCHAR}, #{toWalletAddress,jdbcType=VARCHAR}, #{value,jdbcType=DECIMAL}, 
      #{hash,jdbcType=VARCHAR}, #{tryHash,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{statuMsg,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{gas,jdbcType=DECIMAL}, 
      #{block,jdbcType=INTEGER}, #{delFlag,jdbcType=BIT}, #{addTime,jdbcType=TIMESTAMP}, 
      #{uptTime,jdbcType=TIMESTAMP}, #{memo,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.aite.pojo.AtTransferRecord">
    insert into at_transfer_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="transferRecordId != null">
        transfer_record_id,
      </if>
      <if test="fromWalletAddress != null">
        from_wallet_address,
      </if>
      <if test="coinId != null">
        coin_id,
      </if>
      <if test="toWalletAddress != null">
        to_wallet_address,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="hash != null">
        hash,
      </if>
      <if test="tryHash != null">
        try_hash,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="statuMsg != null">
        statu_msg,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="gas != null">
        gas,
      </if>
      <if test="block != null">
        block,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="uptTime != null">
        upt_time,
      </if>
      <if test="memo != null">
        memo,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="transferRecordId != null">
        #{transferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="fromWalletAddress != null">
        #{fromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="coinId != null">
        #{coinId,jdbcType=VARCHAR},
      </if>
      <if test="toWalletAddress != null">
        #{toWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        #{value,jdbcType=DECIMAL},
      </if>
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="tryHash != null">
        #{tryHash,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="statuMsg != null">
        #{statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="gas != null">
        #{gas,jdbcType=DECIMAL},
      </if>
      <if test="block != null">
        #{block,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptTime != null">
        #{uptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null">
        #{memo,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.aite.pojo.AtTransferRecordExample" resultType="java.lang.Long">
    select count(*) from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update at_transfer_record
    <set>
      <if test="record.transferRecordId != null">
        transfer_record_id = #{record.transferRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.fromWalletAddress != null">
        from_wallet_address = #{record.fromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.coinId != null">
        coin_id = #{record.coinId,jdbcType=VARCHAR},
      </if>
      <if test="record.toWalletAddress != null">
        to_wallet_address = #{record.toWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=DECIMAL},
      </if>
      <if test="record.hash != null">
        hash = #{record.hash,jdbcType=VARCHAR},
      </if>
      <if test="record.tryHash != null">
        try_hash = #{record.tryHash,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.statuMsg != null">
        statu_msg = #{record.statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gas != null">
        gas = #{record.gas,jdbcType=DECIMAL},
      </if>
      <if test="record.block != null">
        block = #{record.block,jdbcType=INTEGER},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=BIT},
      </if>
      <if test="record.addTime != null">
        add_time = #{record.addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uptTime != null">
        upt_time = #{record.uptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.memo != null">
        memo = #{record.memo,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update at_transfer_record
    set transfer_record_id = #{record.transferRecordId,jdbcType=VARCHAR},
      from_wallet_address = #{record.fromWalletAddress,jdbcType=VARCHAR},
      coin_id = #{record.coinId,jdbcType=VARCHAR},
      to_wallet_address = #{record.toWalletAddress,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=DECIMAL},
      hash = #{record.hash,jdbcType=VARCHAR},
      try_hash = #{record.tryHash,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER},
      statu_msg = #{record.statuMsg,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      gas = #{record.gas,jdbcType=DECIMAL},
      block = #{record.block,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=BIT},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      upt_time = #{record.uptTime,jdbcType=TIMESTAMP},
      memo = #{record.memo,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update at_transfer_record
    set transfer_record_id = #{record.transferRecordId,jdbcType=VARCHAR},
      from_wallet_address = #{record.fromWalletAddress,jdbcType=VARCHAR},
      coin_id = #{record.coinId,jdbcType=VARCHAR},
      to_wallet_address = #{record.toWalletAddress,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=DECIMAL},
      hash = #{record.hash,jdbcType=VARCHAR},
      try_hash = #{record.tryHash,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER},
      statu_msg = #{record.statuMsg,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      gas = #{record.gas,jdbcType=DECIMAL},
      block = #{record.block,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=BIT},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      upt_time = #{record.uptTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.aite.pojo.AtTransferRecord">
    update at_transfer_record
    <set>
      <if test="fromWalletAddress != null">
        from_wallet_address = #{fromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="coinId != null">
        coin_id = #{coinId,jdbcType=VARCHAR},
      </if>
      <if test="toWalletAddress != null">
        to_wallet_address = #{toWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=DECIMAL},
      </if>
      <if test="hash != null">
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="tryHash != null">
        try_hash = #{tryHash,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="statuMsg != null">
        statu_msg = #{statuMsg,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="gas != null">
        gas = #{gas,jdbcType=DECIMAL},
      </if>
      <if test="block != null">
        block = #{block,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptTime != null">
        upt_time = #{uptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null">
        memo = #{memo,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.aite.pojo.AtTransferRecord">
    update at_transfer_record
    set from_wallet_address = #{fromWalletAddress,jdbcType=VARCHAR},
      coin_id = #{coinId,jdbcType=VARCHAR},
      to_wallet_address = #{toWalletAddress,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=DECIMAL},
      hash = #{hash,jdbcType=VARCHAR},
      try_hash = #{tryHash,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      statu_msg = #{statuMsg,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      gas = #{gas,jdbcType=DECIMAL},
      block = #{block,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      upt_time = #{uptTime,jdbcType=TIMESTAMP},
      memo = #{memo,jdbcType=LONGVARCHAR}
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.aite.pojo.AtTransferRecord">
    update at_transfer_record
    set from_wallet_address = #{fromWalletAddress,jdbcType=VARCHAR},
      coin_id = #{coinId,jdbcType=VARCHAR},
      to_wallet_address = #{toWalletAddress,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=DECIMAL},
      hash = #{hash,jdbcType=VARCHAR},
      try_hash = #{tryHash,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      statu_msg = #{statuMsg,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      gas = #{gas,jdbcType=DECIMAL},
      block = #{block,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      upt_time = #{uptTime,jdbcType=TIMESTAMP}
    where transfer_record_id = #{transferRecordId,jdbcType=VARCHAR}
  </update>
  <select id="selectOneByExample" parameterType="com.aite.pojo.AtTransferRecordExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.aite.pojo.AtTransferRecordExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        transfer_record_id, from_wallet_address, coin_id, to_wallet_address, `value`, hash, 
          try_hash, `status`, statu_msg, `time`, gas, block, del_flag, add_time, upt_time, 
          memo
      </otherwise>
    </choose>
    from at_transfer_record
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
</mapper>